/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package railwaysystem;
import java.util.Date;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class addTrain extends javax.swing.JInternalFrame {

    /**
     * Creates new form addRoute
     */
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    String DBuser="root";
    String DBpassword="123456789ABC";
    String Driver="com.mysql.cj.jdbc.Driver";
    String URL= "jdbc:mysql://localhost:3306/traindb";
    Connection con; 
    PreparedStatement pst;
    String brand;
    public static ArrayList<String> stations = new ArrayList<String>();
    String tid, sid, name;
   
    // Getter method for stations
    public static ArrayList<String> getStations() {
        return stations;
    }

 
    public void updateArrayListStations() {
        try {
            Class.forName(Driver);  
            String connectionUrl = URL;
            con = DriverManager.getConnection(connectionUrl,DBuser,DBpassword);
            Statement s = con.createStatement();
            ResultSet rs;
            rs = s.executeQuery("select SID from station");
            while(rs.next()){
                stations.add(rs.getString("Sid"));
            }
        }catch (ClassNotFoundException ex) {
            Logger.getLogger(addPassenger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(addPassenger.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
    
    
    public addTrain() {
        initComponents();
        updateDepartSidComboBox();
        updateArriveSidComboBox();
        updateCoachIdComboBox();
        updateArrayListStations();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        trainBrand = new javax.swing.JTextField();
        trainNoSeat = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        departSid = new javax.swing.JComboBox<>();
        arriveSid = new javax.swing.JComboBox<>();
        trainID = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        coachIdComboBox = new javax.swing.JComboBox<>();
        trainDepartureTime = new com.toedter.calendar.JDateChooser();
        trainArrivalTime = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        route = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        addTime = new com.toedter.calendar.JDateChooser();

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Brand");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Number of seat");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Time");

        trainBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainBrandActionPerformed(evt);
            }
        });

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Depart");

        jLabel8.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Arrive");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Station ID");

        departSid.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        departSid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departSidActionPerformed(evt);
            }
        });

        arriveSid.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        arriveSid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arriveSidActionPerformed(evt);
            }
        });

        trainID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainIDActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Train ID");

        jToggleButton1.setText("Get ID");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Coach ID");

        coachIdComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        coachIdComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coachIdComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(trainDepartureTime, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(trainArrivalTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(departSid, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(arriveSid, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jLabel10))
                            .addComponent(jLabel5))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(trainBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(trainID, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jToggleButton1))
                                    .addComponent(trainNoSeat, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addComponent(jLabel9))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jButton1))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(112, 112, 112)
                                .addComponent(jButton2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(coachIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 72, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(trainBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trainID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jToggleButton1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(trainNoSeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(departSid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(trainDepartureTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(arriveSid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(coachIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(19, 19, 19))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(trainArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jLabel6.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel6.setText("New Train");

        jLabel11.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel11.setText("Route");

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        route.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sid", "Location"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        route.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                routeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(route);

        jLabel12.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Add time");

        jButton3.setText("Add route");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("If you want to add many stop-at stations");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setText("please follow the order top-to-bottom in the table above");

        addTime.setBorder(new javax.swing.border.MatteBorder(null));
        addTime.setForeground(new java.awt.Color(255, 102, 51));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(addTime, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(136, 136, 136))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(addTime, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(197, 197, 197))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(28, 28, 28)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trainBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainBrandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trainBrandActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        brand = trainBrand.getText(); 
        String noSeat = trainNoSeat.getText();
        String coachID = coachIdComboBox.getSelectedItem().toString();
        
        
        String sqlDepartDate =sdf.format(trainDepartureTime.getDate());
        String sqlArriveDate =sdf.format(trainArrivalTime.getDate()); 
        
        System.out.println(sqlDepartDate);
        
        String departureStationID =departSid.getSelectedItem().toString();
        String arrivalStationID = arriveSid.getSelectedItem().toString();
        
       
        
        
         tid = trainID.getText();
        try {
            Class.forName(Driver);  
            String connectionUrl = URL;
            con = DriverManager.getConnection(connectionUrl,DBuser,DBpassword);
            pst = con.prepareStatement("INSERT INTO Train (Tid, Brand, No_seat, Coach_ID, Departure_time, Arrival_time, DT_ID, A_ID, Sid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
            pst.setString(1,tid);
            pst.setString(2,brand);
            pst.setString(3,noSeat);
            pst.setString(4,coachID);
            pst.setString(5,sqlDepartDate );
            pst.setString(6, sqlArriveDate);
            pst.setString(7,departureStationID);
            pst.setString(8,arrivalStationID);
            pst.setString(9,departureStationID);
            pst.executeUpdate();
            
            pst = con.prepareStatement("update Employee set Tid = ? , Sid = NULL where Eid = ?");
            pst.setString(1,tid);
            pst.setString(2,coachID);
            pst.executeUpdate();
            
        
            JOptionPane.showMessageDialog(null,"New train added");
            
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(addPassenger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(addPassenger.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        

    }//GEN-LAST:event_jButton1ActionPerformed
    
    public void autoID(String shortBrand) {
    try {
        // Load Driver and Establish Connection
        Class.forName(Driver);
        String connectionUrl = URL;
        con = DriverManager.getConnection(connectionUrl, DBuser, DBpassword);

        // Query to get train IDs
        String query = "SELECT CAST(Tid AS UNSIGNED) AS tid FROM train";
        PreparedStatement ps = con.prepareStatement(query);
        ResultSet rs = ps.executeQuery();

        // Generate unique ID
        int id;
        boolean isUnique;
        do {
            id = (int) (Math.random() * 9999) + 1;
            isUnique = true;

            // Check for duplicate ID
           
            while (rs.next()) {
                int existingId = rs.getInt("tid");
                if (id == existingId) {
                    isUnique = false;
                    break;
                }
            }
        } while (!isUnique);

        // Set the generated train ID
        trainID.setText(shortBrand + id);

        // Close resources
        rs.close();
        ps.close();
        con.close();
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(addPassenger.class.getName()).log(Level.SEVERE, null, ex);
    } catch (SQLException ex) {
        Logger.getLogger(addPassenger.class.getName()).log(Level.SEVERE, null, ex);
    }
}

    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.hide();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void coachIdComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coachIdComboBoxActionPerformed
       
    }//GEN-LAST:event_coachIdComboBoxActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        brand = trainBrand.getText();
        String shortBrand ="";
        shortBrand+=brand.charAt(0);
        for (int i=1;i<brand.length();i++) {
            if(brand.charAt(i)==' ') {
                shortBrand+=brand.charAt(i+1);
            }
        }
        autoID(shortBrand.toUpperCase());
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void arriveSidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arriveSidActionPerformed
            DefaultTableModel tableModel = (DefaultTableModel) route.getModel();
            tableModel.setRowCount(0);

            String s1 = departSid.getSelectedItem().toString();
            String s2 = arriveSid.getSelectedItem().toString();

            // Determine the order based on index comparison
            boolean isDescending = stations.indexOf(s2) < stations.indexOf(s1);
            String order = isDescending ? "DESC" : "ASC";

            // Build stopAtStations based on indices
            List<String> stopAtStationsList = new ArrayList<>();
            int startIndex = Math.min(stations.indexOf(s1), stations.indexOf(s2));
            int endIndex = Math.max(stations.indexOf(s1), stations.indexOf(s2));

            for (int i = startIndex + 1; i < endIndex; i++) {
                stopAtStationsList.add(stations.get(i));
            }

            if (stopAtStationsList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No stations found between the selected points.");
                return;
            }

            // Debugging
            System.out.println("Stop at stations: " + stopAtStationsList);

            try {
                Class.forName(Driver);
                String connectionUrl = URL;
                con = DriverManager.getConnection(connectionUrl, DBuser, DBpassword);

                // Dynamically generate placeholders for IN clause
                StringBuilder placeholders = new StringBuilder();
                for (int i = 0; i < stopAtStationsList.size(); i++) {
                    placeholders.append("?");
                    if (i < stopAtStationsList.size() - 1) {
                        placeholders.append(", ");
                    }
                }

                // Prepare SQL query with dynamic IN clause
                String sql = "SELECT Sid, Name FROM Station WHERE Sid IN (" + placeholders + ") ORDER BY Sid " + order;
                PreparedStatement pst = con.prepareStatement(sql);

                // Set parameters for the placeholders
                for (int i = 0; i < stopAtStationsList.size(); i++) {
                    pst.setString(i + 1, stopAtStationsList.get(i));
                }

                ResultSet rs = pst.executeQuery();

                // Populate table
                while (rs.next()) {
                    String stopAt = rs.getString("Sid");
                    String name = rs.getString("Name");

                    String[] tableRow = {stopAt, name};
                    tableModel.addRow(tableRow);
                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(searchStation.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(searchStation.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }//GEN-LAST:event_arriveSidActionPerformed
    
    private void updateAddRouteTable() {
    tid = trainID.getText();
    ArrayList<String> stopAtSids = new ArrayList<>();
    DefaultTableModel tableModel = (DefaultTableModel) route.getModel();
    tableModel.setRowCount(0);

    String s1 = departSid.getSelectedItem().toString();
    String s2 = arriveSid.getSelectedItem().toString();
    boolean isDescending = stations.indexOf(s2) < stations.indexOf(s1);
    String order = isDescending ? "DESC" : "ASC";

    // Generate stopAtStations list
    List<String> stopAtStationsList = new ArrayList<>();
    int startIndex = Math.min(stations.indexOf(s1), stations.indexOf(s2));
    int endIndex = Math.max(stations.indexOf(s1), stations.indexOf(s2));

    for (int i = startIndex + 1; i < endIndex; i++) {
        stopAtStationsList.add(stations.get(i));
    }

    if (stopAtStationsList.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No intermediate stations between the selected points.");
        return;
    }

    try {
        Class.forName(Driver);
        String connectionUrl = URL;
        con = DriverManager.getConnection(connectionUrl, DBuser, DBpassword);

        // Fetch existing stations for the train
        PreparedStatement psStopAt = con.prepareStatement(
            "SELECT Stop_at.Sid AS Sid FROM Stop_at WHERE Tid = ?");
        psStopAt.setString(1, tid);
        ResultSet rs1 = psStopAt.executeQuery();

        while (rs1.next()) {
            stopAtSids.add(rs1.getString("Sid"));
        }

        // Prepare query with dynamic placeholders for Station filtering
        StringBuilder stopAtStationsPlaceholders = new StringBuilder();
        for (int i = 0; i < stopAtStationsList.size(); i++) {
            stopAtStationsPlaceholders.append("?");
            if (i < stopAtStationsList.size() - 1) {
                stopAtStationsPlaceholders.append(", ");
            }
        }

        StringBuilder stopAtSidsPlaceholders = new StringBuilder();
        for (int i = 0; i < stopAtSids.size(); i++) {
            stopAtSidsPlaceholders.append("?");
            if (i < stopAtSids.size() - 1) {
                stopAtSidsPlaceholders.append(", ");
            }
        }

        String sql = "SELECT Sid, Name FROM Station WHERE Sid IN (" + stopAtStationsPlaceholders +
                     ") AND Sid NOT IN (" + stopAtSidsPlaceholders + ") ORDER BY Sid " + order;
        PreparedStatement psStation = con.prepareStatement(sql);

        // Set parameters for stopAtStations
        int index = 1;
        for (String station : stopAtStationsList) {
            psStation.setString(index++, station);
        }

        // Set parameters for stopAtSids
        for (String sid : stopAtSids) {
            psStation.setString(index++, sid);
        }

        ResultSet rs2 = psStation.executeQuery();

        // Populate table
        while (rs2.next()) {
            String stopAt = rs2.getString("Sid");
            String name = rs2.getString("Name");

            String[] tableRow = {stopAt, name};
            tableModel.addRow(tableRow);
        }

    } catch (ClassNotFoundException ex) {
        Logger.getLogger(searchStation.class.getName()).log(Level.SEVERE, null, ex);
    } catch (SQLException ex) {
        Logger.getLogger(searchStation.class.getName()).log(Level.SEVERE, null, ex);
    }
}
                               
    
    private void departSidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departSidActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) route.getModel();
            tableModel.setRowCount(0);

            String s1 = departSid.getSelectedItem().toString();
            String s2 = arriveSid.getSelectedItem().toString();
            updateCoachIdComboBox();
            
            // Determine the order based on index comparison
            boolean isDescending = stations.indexOf(s2) < stations.indexOf(s1);
            String order = isDescending ? "DESC" : "ASC";

            // Build stopAtStations based on indices
            List<String> stopAtStationsList = new ArrayList<>();
            int startIndex = Math.min(stations.indexOf(s1), stations.indexOf(s2));
            int endIndex = Math.max(stations.indexOf(s1), stations.indexOf(s2));

            for (int i = startIndex + 1; i < endIndex; i++) {
                stopAtStationsList.add(stations.get(i));
            }

           

            // Debugging
            System.out.println("Stop at stations: " + stopAtStationsList);

            try {
                Class.forName(Driver);
                String connectionUrl = URL;
                con = DriverManager.getConnection(connectionUrl, DBuser, DBpassword);

                // Dynamically generate placeholders for IN clause
                StringBuilder placeholders = new StringBuilder();
                for (int i = 0; i < stopAtStationsList.size(); i++) {
                    placeholders.append("?");
                    if (i < stopAtStationsList.size() - 1) {
                        placeholders.append(",");
                    }
                }

                // Prepare SQL query with dynamic IN clause
                String sql = "SELECT Sid, Name FROM Station WHERE Sid IN (" + placeholders + ") ORDER BY Sid " + order;
                PreparedStatement pst = con.prepareStatement(sql);

                // Set parameters for the placeholders
                for (int i = 0; i < stopAtStationsList.size(); i++) {
                    pst.setString(i + 1, stopAtStationsList.get(i));
                }

                ResultSet rs = pst.executeQuery();

                // Populate table
                while (rs.next()) {
                    String stopAt = rs.getString("Sid");
                    String name = rs.getString("Name");

                    String[] tableRow = {stopAt, name};
                    tableModel.addRow(tableRow);
                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(searchStation.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(searchStation.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_departSidActionPerformed

    private void trainIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trainIDActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       // TODO add your handling code here:

        String Date = sdf.format(addTime.getDate());
        
    
    try {
        // Connect to the database
        Class.forName(Driver);
        String connectionUrl = URL;
        con = DriverManager.getConnection(connectionUrl, DBuser, DBpassword);
        
        // Retrieve the arrival time for comparison (date only, no time)
        String arrivalQuery = "SELECT Arrival_time , Departure_time FROM Train WHERE Tid = ?";
        pst = con.prepareStatement(arrivalQuery);
        pst.setString(1, tid); // Assuming tid is available from the current context
        ResultSet rs = pst.executeQuery();
        Date arrivalTimeString = null;
        Date departTimeString = null;
        if (rs.next()) {
            arrivalTimeString = rs.getDate("Arrival_time"); // Fetch the arrival date from DB
            departTimeString = rs.getDate("Departure_time");
        }

        String stop_at_Times = "SELECT Time FROM stop_at WHERE Tid = ?";
        pst = con.prepareStatement(stop_at_Times);
        pst.setString(1, tid);
        rs = pst.executeQuery();
        while (rs.next()) {
            
            // Parse the arrival time string into Date objects for comparison
            Date stop_atTime = rs.getDate("Time");
            
            // Compare the selected time with the arrival time
            if (addTime.getDate().after(arrivalTimeString) || addTime.getDate().before(departTimeString) ||
                addTime.getDate().equals(departTimeString) || addTime.getDate().equals(arrivalTimeString)|| 
                addTime.getDate().equals(stop_atTime)) {
                JOptionPane.showMessageDialog(null, "Invalid date!");
                return; // Exit method if the date is invalid
            }
            System.out.println(rs.getString("Time"));
        }
        
        // If everything is valid, insert the new Stop_at entry
        String query = "INSERT INTO Stop_at (Time, Tid, Sid) VALUES (?, ?, ?)";
        pst = con.prepareStatement(query);
        pst.setString(1, Date);
        pst.setString(2, tid);
        pst.setString(3, sid);
        pst.executeUpdate();
        
        JOptionPane.showMessageDialog(null, "New route added for this train!");
        updateAddRouteTable();
        
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(addEmployee.class.getName()).log(Level.SEVERE, null, ex);
    } catch (SQLException ex) {
        Logger.getLogger(addEmployee.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "Please add the train first.");
    } 
    }//GEN-LAST:event_jButton3ActionPerformed

    private void routeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_routeMouseClicked
        // TODO add your handling code here:
        int selectIndex=route.getSelectedRow();
        sid = route.getValueAt(selectIndex, 0).toString();
        tid = trainID.getText();

    }//GEN-LAST:event_routeMouseClicked
    public void updateDepartSidComboBox() {
         try {
            Class.forName(Driver);  
            String connectionUrl = URL;
            con = DriverManager.getConnection(connectionUrl,DBuser,DBpassword);
            Statement stm = con.createStatement();
            
            
            ResultSet rs = stm.executeQuery("select Sid from Station");
            
            while(rs.next()) {
                String sid = rs.getString("Sid");
                departSid.addItem(sid);
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(addPassenger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(addPassenger.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void updateArriveSidComboBox() {
         try {
            
            Class.forName(Driver);  
            String connectionUrl = "jdbc:mysql://localhost:3306/traindb";
            con = DriverManager.getConnection(connectionUrl,DBuser,DBpassword);
            Statement stm = con.createStatement();
            

            ResultSet rs = stm.executeQuery("SELECT Sid FROM station" );
            


            while(rs.next()) {
                 sid = rs.getString("Sid");
                arriveSid.addItem(sid);
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(addPassenger.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(addPassenger.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void updateCoachIdComboBox() {
        String StationID =departSid.getSelectedItem().toString();
        try{
            Class.forName(Driver);  
            String connectionUrl = URL;
            con = DriverManager.getConnection(connectionUrl,DBuser,DBpassword);
            PreparedStatement s = con.prepareStatement("SELECT Eid FROM Employee WHERE Sid = ?");
            s.setString(1, StationID);
            ResultSet rs;
            rs = s.executeQuery();            
            coachIdComboBox.removeAllItems();

        // Add items to the combo box
           while (rs.next()) {
            String eid = rs.getString("Eid");
            coachIdComboBox.addItem(eid);
        }
        }
        catch (ClassNotFoundException ex) {
            Logger.getLogger(searchStation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(searchStation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser addTime;
    private javax.swing.JComboBox<String> arriveSid;
    private javax.swing.JComboBox<String> coachIdComboBox;
    private javax.swing.JComboBox<String> departSid;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTable route;
    private com.toedter.calendar.JDateChooser trainArrivalTime;
    private javax.swing.JTextField trainBrand;
    private com.toedter.calendar.JDateChooser trainDepartureTime;
    private javax.swing.JTextField trainID;
    private javax.swing.JTextField trainNoSeat;
    // End of variables declaration//GEN-END:variables
}
